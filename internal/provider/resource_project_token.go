package provider

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/argoproj-labs/terraform-provider-argocd/internal/diagnostics"
	argocdSync "github.com/argoproj-labs/terraform-provider-argocd/internal/sync"
	"github.com/argoproj/argo-cd/v3/pkg/apiclient/project"
	"github.com/cristalhq/jwt/v5"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &projectTokenResource{}
var _ resource.ResourceWithModifyPlan = &projectTokenResource{}

func NewProjectTokenResource() resource.Resource {
	return &projectTokenResource{}
}

type projectTokenResource struct {
	si *ServerInterface
}

func (r *projectTokenResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_project_token"
}

func (r *projectTokenResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manages ArgoCD project role JWT tokens. See [Project Roles](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-roles) for more info.\n\n~> **Security Notice** The JWT token generated by this resource is treated as sensitive and, thus, not displayed in console output. However, it will be stored *unencrypted* in your Terraform state file. Read more about sensitive data handling in the [Terraform documentation](https://www.terraform.io/docs/language/state/sensitive-data.html).\n",
		Attributes:          projectTokenSchemaAttributes(),
	}
}

func (r *projectTokenResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	si, ok := req.ProviderData.(*ServerInterface)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Provider Data Type",
			fmt.Sprintf("Expected *ServerInterface, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	r.si = si
}

func (r *projectTokenResource) ModifyPlan(ctx context.Context, req resource.ModifyPlanRequest, resp *resource.ModifyPlanResponse) {
	if req.Plan.Raw.IsNull() {
		// Resource is being destroyed
		return
	}

	var planData *projectTokenModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &planData)...)

	var stateData *projectTokenModel
	resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// If issued_at is empty, this indicates a new token - nothing to do here
	if stateData == nil || stateData.IssuedAt.IsNull() || stateData.IssuedAt.ValueString() == "" {
		return
	}

	issuedAt, err := strconv.ParseInt(stateData.IssuedAt.ValueString(), 10, 64)
	if err != nil {
		resp.Diagnostics.AddError("Invalid issued_at", fmt.Sprintf("invalid issued_at: %s", err.Error()))
		return
	}

	// Check renew_after
	if planData != nil && !planData.RenewAfter.IsNull() && !planData.RenewAfter.IsUnknown() {
		renewAfterDuration, err := time.ParseDuration(planData.RenewAfter.ValueString())
		if err != nil {
			resp.Diagnostics.AddError("Invalid renew_after", fmt.Sprintf("invalid renew_after: %s", err.Error()))
			return
		}

		if time.Now().Unix()-issuedAt > int64(renewAfterDuration.Seconds()) {
			// Token is older than renewAfterDuration - force recreation
			resp.Plan.SetAttribute(ctx, path.Root("issued_at"), types.StringUnknown())
			resp.Plan.SetAttribute(ctx, path.Root("id"), types.StringUnknown())
			resp.Plan.SetAttribute(ctx, path.Root("jwt"), types.StringUnknown())
			resp.Plan.SetAttribute(ctx, path.Root("expires_at"), types.StringUnknown())
			return
		}
	}

	// Check expiration and renew_before
	if stateData != nil && !stateData.ExpiresAt.IsNull() && !stateData.ExpiresAt.IsUnknown() && stateData.ExpiresAt.ValueString() != "" {
		expiresAt, err := strconv.ParseInt(stateData.ExpiresAt.ValueString(), 10, 64)
		if err != nil {
			resp.Diagnostics.AddError("Invalid expires_at", fmt.Sprintf("invalid expires_at: %s", err.Error()))
			return
		}

		if expiresAt == 0 {
			// Token not set to expire - no need to check anything else
			return
		}

		if expiresAt < time.Now().Unix() {
			// Token has expired - force recreation
			resp.Plan.SetAttribute(ctx, path.Root("issued_at"), types.StringUnknown())
			resp.Plan.SetAttribute(ctx, path.Root("id"), types.StringUnknown())
			resp.Plan.SetAttribute(ctx, path.Root("jwt"), types.StringUnknown())
			resp.Plan.SetAttribute(ctx, path.Root("expires_at"), types.StringUnknown())
			return
		}

		if planData != nil && !planData.RenewBefore.IsNull() && !planData.RenewBefore.IsUnknown() {
			renewBeforeDuration, err := time.ParseDuration(planData.RenewBefore.ValueString())
			if err != nil {
				resp.Diagnostics.AddError("Invalid renew_before", fmt.Sprintf("invalid renew_before: %s", err.Error()))
				return
			}

			if expiresAt-time.Now().Unix() < int64(renewBeforeDuration.Seconds()) {
				// Token will expire within renewBeforeDuration - force recreation
				resp.Plan.SetAttribute(ctx, path.Root("issued_at"), types.StringUnknown())
				resp.Plan.SetAttribute(ctx, path.Root("id"), types.StringUnknown())
				resp.Plan.SetAttribute(ctx, path.Root("jwt"), types.StringUnknown())
				resp.Plan.SetAttribute(ctx, path.Root("expires_at"), types.StringUnknown())
			}
		}
	}
}

func (r *projectTokenResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *projectTokenModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	// Initialize API clients
	resp.Diagnostics.Append(r.si.InitClients(ctx)...)

	// Check for errors before proceeding
	if resp.Diagnostics.HasError() {
		return
	}

	projectName := data.Project.ValueString()
	role := data.Role.ValueString()

	opts := &project.ProjectTokenCreateRequest{
		Project: projectName,
		Role:    role,
	}

	if !data.Description.IsNull() {
		opts.Description = data.Description.ValueString()
	}

	var expiresIn int64
	if !data.ExpiresIn.IsNull() {
		expiresInDuration, err := time.ParseDuration(data.ExpiresIn.ValueString())
		if err != nil {
			resp.Diagnostics.AddError(
				"Invalid Expiration Duration",
				fmt.Sprintf("token expiration duration for project %s could not be parsed: %s", projectName, err.Error()),
			)
			return
		}

		expiresIn = int64(expiresInDuration.Seconds())
		opts.ExpiresIn = expiresIn
	}

	if !data.RenewBefore.IsNull() {
		renewBeforeDuration, err := time.ParseDuration(data.RenewBefore.ValueString())
		if err != nil {
			resp.Diagnostics.AddError(
				"Invalid Renewal Duration",
				fmt.Sprintf("token renewal duration for project %s could not be parsed: %s", projectName, err.Error()),
			)
			return
		}

		renewBefore := int64(renewBeforeDuration.Seconds())
		if renewBefore > expiresIn {
			resp.Diagnostics.AddError(
				"Invalid Token Configuration",
				fmt.Sprintf("renew_before (%d) cannot be greater than expires_in (%d) for project %s", renewBefore, expiresIn, projectName),
			)
			return
		}
	}

	// Get or create project mutex safely
	projectMutex := argocdSync.GetProjectMutex(projectName)
	projectMutex.Lock()
	defer projectMutex.Unlock()

	tokenResp, err := r.si.ProjectClient.CreateToken(ctx, opts)

	if err != nil {
		resp.Diagnostics.Append(diagnostics.ArgoCDAPIError("create", "token for project", projectName, err)...)
		return
	}

	token, err := jwt.ParseNoVerify([]byte(tokenResp.GetToken()))
	if err != nil {
		resp.Diagnostics.AddError(
			"Invalid JWT Token",
			fmt.Sprintf("token for project %s is not a valid jwt: %s", projectName, err.Error()),
		)
		return
	}

	var claims jwt.RegisteredClaims
	if err = json.Unmarshal(token.Claims(), &claims); err != nil {
		resp.Diagnostics.AddError(
			"JWT Claims Parse Error",
			fmt.Sprintf("token claims for project %s could not be parsed: %s", projectName, err.Error()),
		)
		return
	}

	if claims.IssuedAt == nil {
		resp.Diagnostics.AddError(
			"Missing JWT Issue Date",
			fmt.Sprintf("token claims issue date for project %s is missing", projectName),
		)
		return
	}

	if claims.ID == "" {
		resp.Diagnostics.AddError(
			"Missing JWT ID",
			fmt.Sprintf("token claims ID for project %s is missing", projectName),
		)
		return
	}

	// Set the response data
	data.ID = types.StringValue(claims.ID)
	data.JWT = types.StringValue(token.String())
	data.IssuedAt = types.StringValue(strconv.FormatInt(claims.IssuedAt.Unix(), 10))

	if !data.ExpiresIn.IsNull() {
		if claims.ExpiresAt == nil {
			resp.Diagnostics.AddError(
				"Missing JWT Expiration Date",
				fmt.Sprintf("token claims expiration date for project %s is missing", projectName),
			)
			return
		}
		data.ExpiresAt = types.StringValue(strconv.FormatInt(claims.ExpiresAt.Unix(), 10))
	} else {
		data.ExpiresAt = types.StringValue("0")
	}

	tflog.Trace(ctx, fmt.Sprintf("created project token %s for project %s", claims.ID, projectName))

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *projectTokenResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *projectTokenModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	// Initialize API clients
	resp.Diagnostics.Append(r.si.InitClients(ctx)...)

	// Check for errors before proceeding
	if resp.Diagnostics.HasError() {
		return
	}

	projectName := data.Project.ValueString()

	// Get or create project mutex safely
	projectMutex := argocdSync.GetProjectMutex(projectName)

	// Delete token from state if project has been deleted in an out-of-band fashion
	projectMutex.RLock()
	defer projectMutex.RUnlock()
	p, err := r.si.ProjectClient.Get(ctx, &project.ProjectQuery{
		Name: projectName,
	})

	if err != nil {
		if strings.Contains(err.Error(), "NotFound") {
			resp.State.RemoveResource(ctx)
			return
		}
		resp.Diagnostics.Append(diagnostics.ArgoCDAPIError("read", "project", projectName, err)...)
		return
	}

	token, _, err := p.GetJWTToken(
		data.Role.ValueString(),
		0,
		data.ID.ValueString(),
	)

	if err != nil {
		// Token has been deleted in an out-of-band fashion
		resp.State.RemoveResource(ctx)
		return
	}

	data.IssuedAt = types.StringValue(strconv.FormatInt(token.IssuedAt, 10))
	data.ExpiresAt = types.StringValue(strconv.FormatInt(token.ExpiresAt, 10))

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *projectTokenResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *projectTokenModel
	var stateData *projectTokenModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)

	// Initialize API clients
	resp.Diagnostics.Append(r.si.InitClients(ctx)...)

	// Check for errors before proceeding
	if resp.Diagnostics.HasError() {
		return
	}

	// Check if this is a token renewal (issued_at is unknown in plan)
	if data.IssuedAt.IsUnknown() {
		// Delete the old token first
		if stateData != nil && !stateData.ID.IsNull() {
			deleteReq := resource.DeleteRequest{State: req.State}
			deleteResp := resource.DeleteResponse{Diagnostics: resp.Diagnostics}
			r.Delete(ctx, deleteReq, &deleteResp)
			resp.Diagnostics = deleteResp.Diagnostics

			if resp.Diagnostics.HasError() {
				return
			}
		}

		// Create a new token
		createReq := resource.CreateRequest{Plan: req.Plan}
		createResp := resource.CreateResponse{State: resp.State, Diagnostics: resp.Diagnostics}
		r.Create(ctx, createReq, &createResp)
		resp.State = createResp.State
		resp.Diagnostics = createResp.Diagnostics
		return
	}

	projectName := data.Project.ValueString()

	// Validate renewal configuration
	var expiresIn int64
	if !data.ExpiresIn.IsNull() {
		expiresInDuration, err := time.ParseDuration(data.ExpiresIn.ValueString())
		if err != nil {
			resp.Diagnostics.AddError(
				"Invalid Expiration Duration",
				fmt.Sprintf("token expiration duration for project %s could not be parsed: %s", projectName, err.Error()),
			)
			return
		}
		expiresIn = int64(expiresInDuration.Seconds())
	}

	if !data.RenewBefore.IsNull() {
		renewBeforeDuration, err := time.ParseDuration(data.RenewBefore.ValueString())
		if err != nil {
			resp.Diagnostics.AddError(
				"Invalid Renewal Duration",
				fmt.Sprintf("token renewal duration for project %s could not be parsed: %s", projectName, err.Error()),
			)
			return
		}

		renewBefore := int64(renewBeforeDuration.Seconds())
		if renewBefore > expiresIn {
			resp.Diagnostics.AddError(
				"Invalid Token Configuration",
				fmt.Sprintf("renew_before (%d) cannot be greater than expires_in (%d) for project %s", renewBefore, expiresIn, projectName),
			)
			return
		}
	}

	// Update the state data with the plan data
	// (no actual API update needed as tokens are immutable)
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *projectTokenResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *projectTokenModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	// Initialize API clients
	resp.Diagnostics.Append(r.si.InitClients(ctx)...)

	// Check for errors before proceeding
	if resp.Diagnostics.HasError() {
		return
	}

	projectName := data.Project.ValueString()

	// Get or create project mutex safely
	projectMutex := argocdSync.GetProjectMutex(projectName)
	projectMutex.Lock()
	defer projectMutex.Unlock()

	_, err := r.si.ProjectClient.DeleteToken(ctx, &project.ProjectTokenDeleteRequest{
		Id:      data.ID.ValueString(),
		Project: projectName,
		Role:    data.Role.ValueString(),
	})

	if err != nil {
		resp.Diagnostics.Append(diagnostics.ArgoCDAPIError("delete", "token for project", projectName, err)...)
		return
	}

	tflog.Trace(ctx, fmt.Sprintf("deleted project token %s for project %s", data.ID.ValueString(), projectName))
}

func (r *projectTokenResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Import format: project:role:id
	parts := strings.Split(req.ID, ":")
	if len(parts) != 3 {
		resp.Diagnostics.AddError(
			"Invalid Import ID",
			"Import ID must be in the format 'project:role:id'",
		)
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("project"), parts[0])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("role"), parts[1])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), parts[2])...)
}

package provider

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/argoproj-labs/terraform-provider-argocd/internal/diagnostics"
	"github.com/argoproj-labs/terraform-provider-argocd/internal/sync"
	"github.com/argoproj/argo-cd/v3/pkg/apiclient/account"
	"github.com/argoproj/argo-cd/v3/pkg/apiclient/session"
	"github.com/cristalhq/jwt/v5"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &accountTokenResource{}
var _ resource.ResourceWithModifyPlan = &accountTokenResource{}

func NewAccountTokenResource() resource.Resource {
	return &accountTokenResource{}
}

// accountTokenResource defines the resource implementation.
type accountTokenResource struct {
	si *ServerInterface
}

func (r *accountTokenResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_account_token"
}

func (r *accountTokenResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rschema.Schema{
		MarkdownDescription: "Manages ArgoCD [account](https://argo-cd.readthedocs.io/en/latest/user-guide/commands/argocd_account/) JWT tokens.\n\n~> **Security Notice** The JWT token generated by this resource is treated as sensitive and, thus, not displayed in console output. However, it will be stored *unencrypted* in your Terraform state file. Read more about sensitive data handling in the [Terraform documentation](https://www.terraform.io/docs/language/state/sensitive-data.html).\n",
		Attributes:          accountTokenResourceSchemaAttributes(),
	}
}

func (r *accountTokenResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	si, ok := req.ProviderData.(*ServerInterface)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Provider Data Type",
			fmt.Sprintf("Expected *ServerInterface, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.si = si
}

func (r *accountTokenResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data accountTokenResourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	// Initialize API clients
	resp.Diagnostics.Append(r.si.InitClients(ctx)...)

	// Check for errors before proceeding
	if resp.Diagnostics.HasError() {
		return
	}

	accountName, err := r.getAccount(ctx, data.Account.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to get account", err.Error())
		return
	}

	opts := &account.CreateTokenRequest{
		Name: accountName,
	}

	var expiresIn int64

	if !data.ExpiresIn.IsNull() && !data.ExpiresIn.IsUnknown() {
		ei := data.ExpiresIn.ValueString()
		expiresInDuration, err := time.ParseDuration(ei)

		if err != nil {
			resp.Diagnostics.AddError(
				"Invalid expires_in duration",
				fmt.Sprintf("Token expiration duration (%s) for account %s could not be parsed: %s", ei, accountName, err),
			)

			return
		}

		expiresIn = int64(expiresInDuration.Seconds())
		opts.ExpiresIn = expiresIn
	}

	if !data.RenewBefore.IsNull() && !data.RenewBefore.IsUnknown() {
		rb := data.RenewBefore.ValueString()
		renewBeforeDuration, err := time.ParseDuration(rb)

		if err != nil {
			resp.Diagnostics.AddError(
				"Invalid renew_before duration",
				fmt.Sprintf("Token renewal duration (%s) for account %s could not be parsed: %s", rb, accountName, err),
			)

			return
		}

		renewBefore := int64(renewBeforeDuration.Seconds())

		if renewBefore > expiresIn {
			resp.Diagnostics.AddError(
				"Invalid renew_before configuration",
				fmt.Sprintf("renew_before (%d) cannot be greater than expires_in (%d) for account token", renewBefore, expiresIn),
			)

			return
		}
	}

	tflog.Trace(ctx, fmt.Sprintf("creating account token for %s", accountName))

	sync.AccountTokensMutex.Lock()
	tokenResp, err := r.si.AccountClient.CreateToken(ctx, opts)
	sync.AccountTokensMutex.Unlock()

	if err != nil {
		resp.Diagnostics.Append(diagnostics.ArgoCDAPIError("create", "token for account", accountName, err)...)
		return
	}

	token, err := jwt.ParseNoVerify([]byte(tokenResp.GetToken()))
	if err != nil {
		resp.Diagnostics.AddError(
			"Invalid JWT token",
			fmt.Sprintf("Token for account %s is not a valid jwt: %s", accountName, err),
		)

		return
	}

	var claims jwt.RegisteredClaims
	if err = json.Unmarshal(token.Claims(), &claims); err != nil {
		resp.Diagnostics.AddError(
			"Failed to parse token claims",
			fmt.Sprintf("Token claims for account %s could not be parsed: %s", accountName, err),
		)

		return
	}

	// Update model with response data
	data.JWT = types.StringValue(token.String())
	data.IssuedAt = types.StringValue(strconv.FormatInt(claims.IssuedAt.Unix(), 10))
	data.Account = types.StringValue(accountName)

	// Handle expiration
	if !data.ExpiresIn.IsNull() && !data.ExpiresIn.IsUnknown() {
		if claims.ExpiresAt == nil {
			resp.Diagnostics.AddError(
				"Missing token expiration",
				fmt.Sprintf("Token claims expiration date for account %s is missing", accountName),
			)

			return
		} else {
			data.ExpiresAt = types.StringValue(strconv.FormatInt(claims.ExpiresAt.Unix(), 10))
		}
	} else {
		// No expiration was set
		data.ExpiresAt = types.StringValue("0")
	}

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)

	// Set the resource ID to the token ID
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), claims.ID)...)
}

func (r *accountTokenResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data accountTokenResourceModel

	// Read Terraform state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	// Initialize API clients
	resp.Diagnostics.Append(r.si.InitClients(ctx)...)

	if resp.Diagnostics.HasError() {
		return
	}

	accountName := data.Account.ValueString()

	// Verify the account still exists
	_, err := r.si.AccountClient.GetAccount(ctx, &account.GetAccountRequest{
		Name: accountName,
	})

	if err != nil {
		if strings.Contains(err.Error(), "NotFound") {
			// Delete token from state if account has been deleted in an out-of-band fashion
			resp.State.RemoveResource(ctx)
			return
		} else {
			resp.Diagnostics.Append(diagnostics.ArgoCDAPIError("read", "account", accountName, err)...)
			return
		}
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *accountTokenResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data, state accountTokenResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)

	if resp.Diagnostics.HasError() {
		return
	}

	accountName := data.Account.ValueString()

	var expiresIn int64
	if !data.ExpiresIn.IsNull() && !data.ExpiresIn.IsUnknown() {
		ei := data.ExpiresIn.ValueString()
		expiresInDuration, err := time.ParseDuration(ei)

		if err != nil {
			resp.Diagnostics.AddError(
				"Invalid expires_in duration",
				fmt.Sprintf("Token expiration duration (%s) for account %s could not be parsed: %s", ei, accountName, err),
			)

			return
		}

		expiresIn = int64(expiresInDuration.Seconds())
	}

	if !data.RenewBefore.IsNull() && !data.RenewBefore.IsUnknown() {
		rb := data.RenewBefore.ValueString()
		renewBeforeDuration, err := time.ParseDuration(rb)

		if err != nil {
			resp.Diagnostics.AddError(
				"Invalid renew_before duration",
				fmt.Sprintf("Token renewal duration (%s) for account %s could not be parsed: %s", rb, accountName, err),
			)

			return
		}

		renewBefore := int64(renewBeforeDuration.Seconds())
		if renewBefore > expiresIn {
			resp.Diagnostics.AddError(
				"Invalid renew_before configuration",
				fmt.Sprintf("renew_before (%d) cannot be greater than expires_in (%d) for account %s", renewBefore, expiresIn, accountName),
			)

			return
		}
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *accountTokenResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data accountTokenResourceModel

	// Read Terraform state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	// Initialize API clients
	resp.Diagnostics.Append(r.si.InitClients(ctx)...)

	if resp.Diagnostics.HasError() {
		return
	}

	accountName := data.Account.ValueString()

	var tokenID string

	req.State.GetAttribute(ctx, path.Root("id"), &tokenID)

	tflog.Trace(ctx, fmt.Sprintf("deleting account token %s for %s", tokenID, accountName))

	sync.AccountTokensMutex.Lock()
	_, err := r.si.AccountClient.DeleteToken(ctx, &account.DeleteTokenRequest{
		Name: accountName,
		Id:   tokenID,
	})
	sync.AccountTokensMutex.Unlock()

	if err != nil && !strings.Contains(err.Error(), "NotFound") {
		resp.Diagnostics.Append(diagnostics.ArgoCDAPIError("delete", "token for account", accountName, err)...)
		return
	}
}

func (r *accountTokenResource) ModifyPlan(ctx context.Context, req resource.ModifyPlanRequest, resp *resource.ModifyPlanResponse) {
	// If this is a destroy operation, we don't need to check for renewal
	if req.Plan.Raw.IsNull() {
		return
	}

	var plan, state accountTokenResourceModel

	// Get the planned values
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Get the current state (if it exists)
	if !req.State.Raw.IsNull() {
		resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
		if resp.Diagnostics.HasError() {
			return
		}

		// Check if token needs renewal based on renewal policies
		needsRenewal, err := r.checkTokenRenewal(ctx, &state)
		if err != nil {
			resp.Diagnostics.AddError("Failed to check token renewal", err.Error())
			return
		}

		if needsRenewal {
			tflog.Debug(ctx, "Token renewal required, forcing resource recreation")

			// Force replacement by requiring recreate on the issued_at field
			resp.Diagnostics.Append(resp.Plan.SetAttribute(ctx, path.Root("issued_at"), types.StringUnknown())...)
			resp.RequiresReplace = append(resp.RequiresReplace, path.Root("issued_at"))
		}
	}
}

func (r *accountTokenResource) checkTokenRenewal(ctx context.Context, state *accountTokenResourceModel) (bool, error) {
	now := time.Now()

	// Check if issued_at is available
	if state.IssuedAt.IsNull() || state.IssuedAt.IsUnknown() {
		return false, nil
	}

	issuedAtStr := state.IssuedAt.ValueString()
	issuedAt, err := strconv.ParseInt(issuedAtStr, 10, 64)
	if err != nil {
		return false, fmt.Errorf("failed to parse issued_at: %w", err)
	}

	// Check renew_after logic: if currentTime - issued_at > renew_after
	if !state.RenewAfter.IsNull() && !state.RenewAfter.IsUnknown() {
		renewAfterStr := state.RenewAfter.ValueString()
		renewAfterDuration, err := time.ParseDuration(renewAfterStr)
		if err != nil {
			return false, fmt.Errorf("failed to parse renew_after: %w", err)
		}

		if now.Unix()-issuedAt > int64(renewAfterDuration.Seconds()) {
			tflog.Debug(ctx, fmt.Sprintf("Token renewal triggered by renew_after: age=%d, threshold=%d",
				now.Unix()-issuedAt, int64(renewAfterDuration.Seconds())))
			return true, nil
		}
	}

	// Check renew_before logic: if expires_at - currentTime < renew_before
	if !state.RenewBefore.IsNull() && !state.RenewBefore.IsUnknown() &&
		!state.ExpiresAt.IsNull() && !state.ExpiresAt.IsUnknown() {

		expiresAtStr := state.ExpiresAt.ValueString()
		if expiresAtStr != "0" { // "0" means no expiration
			expiresAt, err := strconv.ParseInt(expiresAtStr, 10, 64)
			if err != nil {
				return false, fmt.Errorf("failed to parse expires_at: %w", err)
			}

			renewBeforeStr := state.RenewBefore.ValueString()
			renewBeforeDuration, err := time.ParseDuration(renewBeforeStr)
			if err != nil {
				return false, fmt.Errorf("failed to parse renew_before: %w", err)
			}

			if expiresAt-now.Unix() < int64(renewBeforeDuration.Seconds()) {
				tflog.Debug(ctx, fmt.Sprintf("Token renewal triggered by renew_before: remaining=%d, threshold=%d",
					expiresAt-now.Unix(), int64(renewBeforeDuration.Seconds())))
				return true, nil
			}
		}
	}

	// Check if token has already expired
	if !state.ExpiresAt.IsNull() && !state.ExpiresAt.IsUnknown() {
		expiresAtStr := state.ExpiresAt.ValueString()
		if expiresAtStr != "0" { // "0" means no expiration
			expiresAt, err := strconv.ParseInt(expiresAtStr, 10, 64)
			if err != nil {
				return false, fmt.Errorf("failed to parse expires_at: %w", err)
			}

			if expiresAt < now.Unix() {
				tflog.Debug(ctx, "Token renewal triggered by expiration")
				return true, nil
			}
		}
	}

	return false, nil
}

func (r *accountTokenResource) getAccount(ctx context.Context, accountName string) (string, error) {
	if accountName != "" {
		return accountName, nil
	}

	userInfo, err := r.si.SessionClient.GetUserInfo(ctx, &session.GetUserInfoRequest{})
	if err != nil {
		return "", fmt.Errorf("failed to get current account: %w", err)
	}

	return userInfo.Username, nil
}
